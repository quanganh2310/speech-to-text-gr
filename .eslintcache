[{"D:\\Lab\\speech-to-text-electron\\electron-react-app\\src\\reportWebVitals.js":"1","D:\\Lab\\speech-to-text-electron\\electron-react-app\\src\\App.js":"2","D:\\Lab\\speech-to-text-electron\\electron-react-app\\src\\index.js":"3"},{"size":362,"mtime":1609599939708,"results":"4","hashOfConfig":"5"},{"size":3366,"mtime":1610028726575,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1609599939708,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fq9jch",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Lab\\speech-to-text-electron\\electron-react-app\\src\\reportWebVitals.js",[],"D:\\Lab\\speech-to-text-electron\\electron-react-app\\src\\App.js",["15","16"],"import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport recognizeMic from 'watson-speech/speech-to-text/recognize-microphone';\nimport axios from 'axios';\n\nlet seq_num = 1;\nlet languageCode = 'en-US';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {}\n  }\n\n  componentDidMount() {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.log(\"enumerateDevices() not supported.\");\n      return;\n    }\n    \n    // List cameras and microphones.\n    \n    navigator.mediaDevices.enumerateDevices()\n    .then(function(devices) {\n      devices.forEach(function(device) {\n        console.log(device.kind + \": \" + device.label +\n                    \" id = \" + device.deviceId);\n      });\n    })\n    .catch(function(err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  onListenClick() {\n\n    fetch('http://localhost:8000/api/v1/credentials')\n      .then(function(response) {\n          return response.text();\n      }).then((token) => {\n        var data = JSON.parse(token)\n        console.log('token is', data.accessToken)\n        var stream = recognizeMic({\n            url: data.serviceUrl,\n            token: data.accessToken,\n            accessToken: data.accessToken,\n            objectMode: true, // send objects instead of text\n            extractResults: true, // convert {results: [{alternatives:[...]}], result_index: 0} to {alternatives: [...], index: 0}\n            format: false // optional - performs basic formatting on the results such as capitals an periods\n        });\n        stream.on('data', (data) => {\n          this.setState({\n            text: data.alternatives[0].transcript\n          });\n          let transcript = data.alternatives[0].transcript;\n          let zoom_end_point_url = 'https://wmcc.zoom.us/closedcaption?id=9086363314&ns=UXVhbmcgQW5oIE5ndXllbidzIFBlcnNvbmFsIE1l&expire=86400&sparams=id%2Cns%2Cexpire&signature=lnFyYigJ8ODsAY0QsS07Uioze1EKnwG4TGoWd8dpV-k.AG.5Mg6tXksPwDxd8bRErHu5pf7Rlctwc48d16flWcwEeVsGqS24kHDvmgpnDj88PEpuPY01Bo8Sic6lX6W-YatlrFTjlXwOQht6_RaZyCFyYdYLqo_EZva6Q.2Mbu_l51oTnerYgf_CGXVg.KR6FyEhZrdAqg0Mf' + '&seq='+ seq_num + '&lang=' + languageCode;\n          axios({\n            method: 'POST',\n            url: zoom_end_point_url,\n            data:  transcript,\n            headers: {\n                'Content-Type': 'text/plain'\n            }\n          })\n          .then(function () {\n              if (window.console && window.console.log) {\n                  console.log('transcript sent to zoom:', transcript);\n              }\n          })\n          .catch(function (error) {\n              if (window.console && window.console.error) {\n                  console.error('transcript sent to zoom:', transcript, 'error:', error);\n              }\n          });\n          seq_num++;      \n        });\n        stream.on('error', function(err) {\n            console.log(err);\n        });\n        document.querySelector('#stop').onclick = stream.stop.bind(stream);\n      }).catch(function(error) {\n          console.log(error);\n      });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.onListenClick.bind(this)}>Listen to microphone</button>\n        <div style={{fontSize: '40px'}}>{this.state.text}</div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","D:\\Lab\\speech-to-text-electron\\electron-react-app\\src\\index.js",[],{"ruleId":"17","severity":1,"message":"18","line":2,"column":8,"nodeType":"19","messageId":"20","endLine":2,"endColumn":12},{"ruleId":"21","severity":1,"message":"22","line":58,"column":385,"nodeType":"23","messageId":"24","endLine":58,"endColumn":386},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat"]